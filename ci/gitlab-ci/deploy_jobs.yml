deploy-dev-image-to-gitlab:
  extends: .abstract_jobs.docker
  stage: deploy
  script:
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/push_image_to_gitlab.sh dev
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /deploy-dev-image-to-gitlab/
    - if: $DEPLOY_DEV_IMAGE_TO_GITLAB == "true"
    - if: $PIPELINE_TYPE =~ /build-dev-images/
  timeout: 20m
  interruptible: false
deploy-dev-image-to-gitlab-arm64:
  services:
    - name: ${UTIL_REGISTRY}/docker:20.10.21-dind-r1
      alias: docker
  image: ${UTIL_REGISTRY}/docker:20.10.21-r1
  extends: deploy-dev-image-to-gitlab
  variables:
    IMAGE_TAG_PLATFORM_POSTFIX: -arm64
    IMAGE_TAG: ${CI_PIPELINE_ID}-${PHP_VERSION}-arm64
  tags:
    - arm64
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /deploy-dev-image-to-gitlab-arm64/
    - if: $DEPLOY_DEV_IMAGE_TO_GITLAB_ARM64 == "true"
    - if: $PIPELINE_TYPE =~ /build-dev-images/

deploy-dev-image-to-dockerhub:
  extends: .abstract_jobs.docker
  stage: deploy
  script:
    - !reference [.lib, script]
    - docker_hub_deploy dev dev $(echo $CI_COMMIT_REF_NAME | sed sI/I-Ig)-${PHP_VERSION}${IMAGE_TAG_PLATFORM_POSTFIX}
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /deploy-dev-image-to-dockerhub/
    - if: $DEPLOY_DEV_IMAGE_TO_DOCKERHUB == "true"
    - if: $PIPELINE_TYPE =~ /build-dev-images/
  timeout: 20m
  interruptible: false
deploy-dev-image-to-dockerhub-arm64:
  services:
    - name: ${UTIL_REGISTRY}/docker:20.10.21-dind-r1
      alias: docker
  image: ${UTIL_REGISTRY}/docker:20.10.21-r1
  extends: deploy-dev-image-to-dockerhub
  variables:
    IMAGE_TAG_PLATFORM_POSTFIX: -arm64
    IMAGE_TAG: ${CI_PIPELINE_ID}-${PHP_VERSION}-arm64
  tags:
    - arm64
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /deploy-dev-image-to-dockerhub-arm64/
    - if: $DEPLOY_DEV_IMAGE_TO_DOCKERHUB_ARM64 == "true"
    - if: $PIPELINE_TYPE =~ /build-dev-images/




deploy-built-image-to-dockerhub:
  extends: .abstract_jobs.docker
  stage: deploy
  script:
    - !reference [.lib, script]
    - docker login -u "${DOCKERHUB_USER}" -p "${DOCKERHUB_TOKEN}" "docker.io"
    - docker_registry_release_image built docker.io/tinegroupware/tine $LATEST
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /deploy-built-image-to-dockerhub/
      when: manual
    - if: $PIPELINE_TYPE =~ /release-be/
      variables:
        LATEST: "true"
    - if: $PIPELINE_TYPE =~ /release-weekly/
  timeout: 20m
  interruptible: false

deploy-customer-image-to-registry:
  extends: .abstract_jobs.docker
  stage: deploy
  variables:
    GIT_DEPTH: 100
  script:
    - !reference [.lib, script]
    - docker login --username $CUSTOMER_IMAGE_REGISTRY_USERNAME --password $CUSTOMER_IMAGE_REGISTRY_PASSWORD $CUSTOMER_IMAGE_REGISTRY_REPO
    - docker_registry_release_image built "$CUSTOMER_IMAGE_REGISTRY_REPO" true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /deploy-customer-image-to-registry/
      when: manual
    - if: $PIPELINE_TYPE =~ /release-customer/ &&  $DEPLOY_CUSTOMER_IMAGE_TO_REGISTRY == "true"
  timeout: 20m
  interruptible: false

# creates a gitlab release - some text, changelog and link to the local packages
release-to-gitlab:
  extends: .abstract_jobs.docker
  variables:
    GIT_DEPTH: 100
  stage: deploy
  needs:
    - docker_build_packages
  before_script:
    # todo move to docker image
    - wget https://gitlab.com/api/v4/projects/16573099/packages/generic/release-cli/v0.10.0/release-cli-linux-amd64
    - mv release-cli-linux-amd64 /usr/local/bin/release-cli
    - chmod +x /usr/local/bin/release-cli
  script:
    - !reference [.lib, script]
    - release_to_gitlab
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /release-to-gitlab/
      when: manual
    - if: $PIPELINE_TYPE =~ /release-be/
    - if: $PIPELINE_TYPE =~ /release-lts/
    - if: $PIPELINE_TYPE =~ /release-weekly/
    - if: $PIPELINE_TYPE =~ /release-monthly/
    - if: $PIPELINE_TYPE =~ /release-customer/
  timeout: 20m
  interruptible: true

release-packages-to-vpackages:
  extends: .abstract_jobs.docker
  stage: deploy
  before_script:
    - apk add openssh
    - eval $(ssh-agent -s)
    - echo "$VPACKAGES_DEPLOY_KEY" | tr -d '\r' | ssh-add -
  script:
    - !reference [.lib, script]
    - release_packages_vpackages_push
    - if [ "$CREATE_CURRENT_LINK" == "true" ]; then release_packages_vpackages_create_current_link; fi
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /release-packages-to-vpackages/
      when: manual
    - if: $PIPELINE_TYPE =~ /release-be/
      variables:
        CREATE_CURRENT_LINK: "true"
    - if: $PIPELINE_TYPE =~ /release-lts/
    - if: $PIPELINE_TYPE =~ /release-customer/ && $PUSH_TO_VPACKAGES == "true"
  timeout: 20m
  interruptible: false

# only set current link - packages where already pushed by the packaging job
release-packages-to-gitlab:
  extends: .abstract_jobs.docker          
  stage: deploy
  script:
    - !reference [.lib, script]
    - release_packages_gitlab_set_current_link
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /release-packages-to-gitlab/
      when: manual
    - if: $PIPELINE_TYPE =~ /release-be/
    - if: $PIPELINE_TYPE =~ /release-customer/
  timeout: 20m
  interruptible: false

# creates a github release - some text, changelog, packages
release-packages-to-github:
  extends: .abstract_jobs.docker
  stage: deploy
  script:
    - !reference [.lib, script]
    - release_push_release_tag_to_github
    - release_packages_github_create_release
    - release_packages_notify_matrix
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /release-packages-to-github/
      when: manual
      variables:
        RELEASE_TYPE: nightly
    - if: $PIPELINE_TYPE =~ /release-be/
      variables:
        RELEASE_TYPE: be
    - if: $PIPELINE_TYPE =~ /release-weekly/ # should/is only be pushed as pre release
      variables:
        RELEASE_TYPE: weekly
  timeout: 20m
  interruptible: false

trigger-release:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  image: ${UTIL_REGISTRY}/docker:19.03.1-r3
  needs: []
  script:
    - !reference [.lib, script]
    - release_tag
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /trigger-release/
    - if: $TRIGGER_RELEASE == "false"
      when: never
    - if: $TRIGGER_RELEASE == "true"
    - if: $PIPELINE_TYPE =~ /trigger-release/
  timeout: 20m
  interruptible: false

mkdocs-deploy:
  stage: deploy
  image: ${UTIL_REGISTRY}/mkdocs:ci-r1
  needs: []
  script:
    - cd tine20
    - composer install --ignore-platform-reqs
    - vendor/bin/phpdoc-md
    - cd ..
    - mkdocs build
    - s3cmd --access_key=${DOCS_S3_ACCESS_KEY} --secret_key=${DOCS_S3_SECRET_KEY} --host ${DOCS_S3_HOST} --host-bucket "%(bucket)s.${DOCS_S3_HOST}" --acl-public --delete-removed --no-mime-magic sync ./site/ s3://${DOCS_S3_BUCKET}
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /mkdocs-deploy/
    - if: $MKDOCS_DEPLOY == "false"
      when: never
    - if: $MKDOCS_DEPLOY == "true"
    # mkdocs-deploy is triggered by a nightly pipeline and if docs changes. Maybe we only need one of them?
    - if: $PIPELINE_TYPE =~ /mkdocs-deploy/ && $CI_COMMIT_REF_NAME == "2024.11"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "2024.11"
      changes:
        - docs/**/*
  timeout: 20m
  interruptible: false

update-version-check:
  stage: deploy
  extends: .abstract_jobs.docker
  variables:
    PACKAGE_STRING: ${CI_COMMIT_TAG}
    CODE_NAME: ${CODENAME}
    BUILD: "1"
  script:
    - !reference [.lib, script]
    - version_check_update
  rules:
    - if: $PIPELINE_TYPE =~ /release-be/