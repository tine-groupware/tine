# ============ stage: build1-2 ===========================
# This stage builds all docker images
#
# The images are named according to $REGISTRY/$NAME-commit:$CI_PIPELINE_ID-${PHP_VERSION}${IMAGE_TAG_PLATFORM_POSTFIX}.
#
# Gitlab currently dose not support needs in the same stage.
# Therefore we need multiple build stages.

# docker build source or dependecy image
.docker_build_source:
  extends: .abstract_jobs.docker
  stage: build1
  variables:
    GIT_STRATEGY: none
  script:
    - !reference [.lib, script]
    - git_repo_clone
    - docker_build_image base $(docker_image_hash base)
    - export BASE_IMAGE="${REGISTRY}/base:$(docker_image_hash base)"
    - docker_build_image dependency $(docker_image_hash dependency)
    - export DEPENDENCY_IMAGE="${REGISTRY}/dependency:$(docker_image_hash dependency)"
    - |
      echo "${REUSE_IMAGES}"
      if [ "${REUSE_IMAGES}" == true ]; then
        docker_build_image test-dependency $(docker_image_hash test-dependency)
        docker_registry_use_hash_image_as_commit_image test-dependency test-source $(docker_image_hash test-dependency)
      else
        cp $DOCKER_GIT_CONFIG ./ci/dockerimage/.gitconfig
        ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/reuse_or_build_image.sh source false
        ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/reuse_or_build_image.sh test-source false
      fi
  timeout: 60m
  interruptible: true
  rules:
    - if: $DOCKER_BUILD_SOURCE == "true"
    # todo find a better solution
    # do not reuse image wenn building build image
    # from php-unit-all-tests-built:
    - if: $PHP_UNIT_ALL_TESTS_BUILT == "true"
      variables:
        REUSE_IMAGES: "false"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $PHP_UNIT_ALL_TESTS_BUILT_MERGE_REQUEST == "true"
      variables:
        REUSE_IMAGES: "false"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /php-unit-all-tests-built/
      variables:
        REUSE_IMAGES: "false"
    # from php-unit-nogitlabci-tests-built:
    - if: $PHP_UNIT_NOGITLABCI_TESTS_BUILT == "true"
      variables:
        REUSE_IMAGES: "false"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $PHP_UNIT_NOGITLABCI_TESTS_BUILT_MERGE_REQUEST == "true"
      variables:
        REUSE_IMAGES: "false"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /php-unit-nogitlabci-tests-built/
      variables:
        REUSE_IMAGES: "false"
    # from php-unit-tinebase-tests-built:
    - if: $PHP_UNIT_TINEBASE_TESTS_BUILT == "true"
      variables:
          REUSE_IMAGES: "false"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $PHP_UNIT_TINEBASE_TESTS_BUILT_MERGE_REQUEST == "true"
      variables:
          REUSE_IMAGES: "false"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /php-unit-tinebase-tests-built/
      variables:
          REUSE_IMAGES: "false"
    # from php-unit-all-tests-ldap-built:
    - if: $PHP_UNIT_ALL_TESTS_LDAP_BUILD == "true"
      variables:
        REUSE_IMAGES: "false"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $PHP_UNIT_ALL_TESTS_LDAP_BUILD_MERGE_REQUEST == "true"
      variables:
        REUSE_IMAGES: "false"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /php-unit-all-tests-ldap-built/
      variables:
        REUSE_IMAGES: "false"
    # do not reuse image wenn building build image
    # from deploy-built-image-to-gitlab:
    - if: $DEPLOY_BUILD_IMAGE_TO_GITLAB == "true"
      variables:
        REUSE_IMAGES: "false"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /deploy-built-image-to-gitlab/
      variables:
        REUSE_IMAGES: "false"
    # from release-to-github
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /release-to-github/
      variables:
        REUSE_IMAGES: "false"
    # from deploy-images-to-dockerhub:
    - if: $DEPLOY_IMAGES_TO_DOCKERHUB == "true"
      variables:
        REUSE_IMAGES: "false"
    # do not reuse image wenn building dev image
    # from deploy-dev-image-to-gitlab:
    - if: $DEPLOY_DEV_IMAGE_TO_GITLAB == "true"
      variables:
        REUSE_IMAGES: "false"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /deploy-dev-image-to-gitlab/
      variables:
        REUSE_IMAGES: "false"
    # from deploy-images-to-dockerhub:
    - if: $DEPLOY_IMAGES_TO_DOCKERHUB == "true"
      variables:
        REUSE_IMAGES: "false"
    # from docker build packages:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /docker-build-packages/
      variables:
        REUSE_IMAGES: "false"
    # from deploy-customer-image-to-registry:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /deploy-customer-image-to-registry/
      variables:
        REUSE_IMAGES: "false"
    # from push-to-vpackages:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /push-to-vpackages/
      variables:
        REUSE_IMAGES: "false"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /release-packages-to-github/
      variables:
        REUSE_IMAGES: "false"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /release-packages-to-gitlab/
      variables:
        REUSE_IMAGES: "false"
    - if: $PIPELINE_TYPE =~ /build-nightly/
      variables:
        REUSE_IMAGES: "false"
    # from deploy-dev-image-to-dockerhub
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /deploy-dev-image-to-dockerhub/
    #
    - if: $PIPELINE_TYPE =~ /default-tests/
      variables:
        REUSE_IMAGES: "false"
    - if: $PIPELINE_TYPE =~ /mr-tests/
      variables:
        REUSE_IMAGES: "false"
    - if: $PIPELINE_TYPE =~ /e2e-tests/
      variables:
        REUSE_IMAGES: "false"
    - if: $PIPELINE_TYPE =~ /matrix-tests/
      variables:
        REUSE_IMAGES: "false"
    - if: $PIPELINE_TYPE =~ /update-tests/
      variables:
        REUSE_IMAGES: "false"
    - if: $PIPELINE_TYPE =~ /build-dev-images/
      variables:
        REUSE_IMAGES: "false"
    - if: $PIPELINE_TYPE =~ /auto-merge-with-source/
      variables:
        REUSE_IMAGES: "false"
    - if: $CI_COMMIT_TAG
      variables:
        REUSE_IMAGES: "false"
    # run for any merge request
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

docker_build_source:
  extends: .docker_build_source
  rules:
    - !reference [.docker_build_source, rules]
docker_build_source_matrix:
  extends: .docker_build_source
  parallel:
    matrix:
      - PHP_VERSION:
          - "8.0"
          - "8.1"
          - "8.2"
  rules:
    - if: $PIPELINE_TYPE =~ /matrix-tests/
    - if: $PHP_UNIT_ALL_TESTS_SOURCE_TYPE != "matrix"
      when: never
    - !reference [.docker_build_source, rules]
docker_build_source_arm64:
  services:
    - name: ${UTIL_REGISTRY}/docker:20.10.21-dind-r1
      alias: docker
  image: ${UTIL_REGISTRY}/docker:20.10.21-r1
  extends: .docker_build_source
  tags:
    - arm64
  variables:
    IMAGE_TAG_PLATFORM_POSTFIX: -arm64
    IMAGE_TAG: ${CI_PIPELINE_ID}-${PHP_VERSION}-arm64
    KUBERNETES_CPU_REQUEST: 200m
    KUBERNETES_CPU_LIMIT: 200m
    KUBERNETES_MEMORY_REQUEST: 1Gi
    KUBERNETES_MEMORY_LIMIT: 1Gi
    KUBERNETES_HELPER_CPU_REQUEST: 100m
    KUBERNETES_HELPER_CPU_LIMIT: 100m
    KUBERNETES_HELPER_MEMORY_REQUEST: 200Mi
    KUBERNETES_HELPER_MEMORY_LIMIT: 2Gi
    KUBERNETES_SERVICE_CPU_REQUEST: 1500m
    KUBERNETES_SERVICE_CPU_LIMIT: 3
    KUBERNETES_SERVICE_MEMORY_REQUEST: 3Gi
    KUBERNETES_SERVICE_MEMORY_LIMIT: 6Gi
  rules:
    - if: $DOCKER_BUILD_SOURCE_ARM64 == "false"
      when: never
    - if: $DOCKER_BUILD_SOURCE_ARM64 == "true"
      variables:
        REUSE_IMAGES: "false"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /docker-build-source-arm64/
      variables:
        REUSE_IMAGES: "false"
    #from docker_build_built_arm64:
    - if: $DOCKER_BUILD_BUILT_ARM64 == "true"
      variables:
        REUSE_IMAGES: "false"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /docker-build-built-arm64/
      variables:
        REUSE_IMAGES: "false"
    #from deploy-built-image-to-gitlab-arm64:
    - if: $DEPLOY_BUILT_IMAGE_TO_GITLAB_ARM64 == "true"
      variables:
        REUSE_IMAGES: "false"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /deploy-built-image-to-gitlab-arm64/
      variables:
        REUSE_IMAGES: "false"
    #from docker_build_dev_arm64:
    - if: $DOCKER_BUILD_DEV_ARM64 == "true"
      variables:
        REUSE_IMAGES: "false"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /docker-build-dev-arm64/
      variables:
        REUSE_IMAGES: "false"
    #from deploy-dev-image-to-gitlab-arm64:
    - if: $DEPLOY_DEV_IMAGE_TO_GITLAB_ARM64 == "true"
      variables:
        REUSE_IMAGES: "false"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /deploy-dev-image-to-gitlab-arm64/
      variables:
        REUSE_IMAGES: "false"
    - if: $PIPELINE_TYPE =~ /build-dev-images/
      variables:
        REUSE_IMAGES: "false"
    # from deploy-dev-image-to-dockerhub-arm64
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /deploy-dev-image-to-dockerhub-arm64/

docker_build_built:
  extends: .abstract_jobs.docker
  stage: build2
  needs: []
  script:
    - !reference [.lib, script]
    - docker_build_image base $(docker_image_hash base)
    - export BASE_IMAGE="${REGISTRY}/base:$(docker_image_hash base)"
    - docker_build_image dependency $(docker_image_hash dependency)
    - export DEPENDENCY_IMAGE="${REGISTRY}/dependency:$(docker_image_hash dependency)"
    - |
      echo "${REUSE_IMAGES}"
      if [ "${REUSE_IMAGES}" == true ]; then
        docker_build_image test-dependency $(docker_image_hash test-dependency)
        docker_registry_use_hash_image_as_commit_image test-dependency test-source $(docker_image_hash test-dependency)
      else
        cp $DOCKER_GIT_CONFIG ./ci/dockerimage/.gitconfig
        ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/reuse_or_build_image.sh source false
        ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/reuse_or_build_image.sh test-source false
      fi
    - !reference [.lib, script]
    - docker_build_image base $(docker_image_hash base)
    - export BASE_IMAGE="${REGISTRY}/base:$(docker_image_hash base)";
    - docker_build_image dependency $(docker_image_hash dependency)
    - export DEPENDENCY_IMAGE="${REGISTRY}/dependency:$(docker_image_hash dependency)";
    - docker_build_image jsdependency $(docker_image_hash jsdependency)
    - export JSDEPENDENCY_IMAGE="${REGISTRY}/jsdependency:$(docker_image_hash jsdependency)"
    - cp $DOCKER_GIT_CONFIG ./ci/dockerimage/.gitconfig
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/reuse_or_build_image.sh source false
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/build_image.sh jsbuild
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/build_image.sh build
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/build_image.sh built
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/build_image.sh test-built
  rules:
    - if: $PIPELINE_TYPE =~ /release-weekly/
      variables:
        RELEASE_TYPE: weekly
    - if: $PIPELINE_TYPE =~ /build-nightly/ # todo: to become release-nightly. Then remove this. release will be the cache all.
      variables:
        RELEASE_TYPE: be
    - if: $PIPELINE_TYPE =~ /release/
      variables:
        RELEASE_TYPE: be
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /docker-build-built/
    - !reference [.php-unit-all-tests-built, rules]
    - !reference [.php-unit-tinebase-tests-built, rules]
    - !reference [.php-unit-nogitlabci-tests-built, rules]
    - !reference [docker_build_packages, rules]
    - !reference [deploy-customer-image-to-registry, rules]
    - !reference [.deploy-built-image-to-dockerhub, rules]
  timeout: 120m
  interruptible: true
# docker_build_built_arm64:
#   services:
#     - name: ${UTIL_REGISTRY}/docker:20.10.21-dind-r1
#       alias: docker
#   image: ${UTIL_REGISTRY}/docker:20.10.21-r1
#   extends: docker_build_built
#   variables:
#     IMAGE_TAG_PLATFORM_POSTFIX: -arm64
#     IMAGE_TAG: ${CI_PIPELINE_ID}-${PHP_VERSION}-arm64
#   tags:
#     - arm64
#   rules:
#     - if: $DOCKER_BUILD_BUILT_ARM64 == "false"
#       when: never
#     - if: $DOCKER_BUILD_BUILT_ARM64 == "true"
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /docker-build-built-arm64/

docker_build_dev:
  extends: .abstract_jobs.docker
  stage: build2
  script:
    - !reference [.lib, script]
    - docker_build_image base $(docker_image_hash base)
    - export BASE_IMAGE="${REGISTRY}/base:$(docker_image_hash base)";
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/build_image.sh dev
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /docker-build-dev/
    - !reference [deploy-dev-image-to-gitlab, rules]
    - !reference [deploy-dev-image-to-dockerhub, rules]
  timeout: 60m
  interruptible: true
docker_build_dev_arm64:
  services:
    - name: ${UTIL_REGISTRY}/docker:20.10.21-dind-r1
      alias: docker
  image: ${UTIL_REGISTRY}/docker:20.10.21-r1
  extends: docker_build_dev
  variables:
    IMAGE_TAG_PLATFORM_POSTFIX: -arm64
    IMAGE_TAG: ${CI_PIPELINE_ID}-${PHP_VERSION}-arm64
  tags:
    - arm64
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /docker-build-dev-arm64/
    - !reference [deploy-dev-image-to-gitlab-arm64, rules]
    - !reference [deploy-dev-image-to-dockerhub-arm64, rules]

docker_build_test:
  extends: .abstract_jobs.docker
  stage: build1
  parallel: !reference [push-test-image-to-gitlab, parallel]
  script:
    - !reference [.lib, script]
    - docker_build_image base $(docker_image_hash base)
    - export BASE_IMAGE="${REGISTRY}/base:$(docker_image_hash base)";
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/build_image.sh test
  rules:
    - !reference [push-test-image-to-gitlab, rules]
  timeout: 60m
  interruptible: true

docker_build_packages:
  extends: .abstract_jobs.docker
  stage: build3
  variables:
    GIT_DEPTH: 100
  script:
    - !reference [.lib, script]
    - packaging
  rules:
    - if: $CI_COMMIT_TAG
    - if: $PIPELINE_TYPE =~ /build-nightly/
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /docker-build-packages/
    - !reference [release-packages-to-gitlab, rules]
    - !reference [.release-packages-to-github, rules]
    - !reference [release-packages-to-vpackages, rules]
  timeout: 120m
  interruptible: true