docker_build_built:
  extends: .abstract_jobs.docker
  stage: build2
  needs: []
  script:
    - !reference [.lib, script]
    - docker_build_image base $(docker_image_hash base)
    - export BASE_IMAGE="${REGISTRY}/base:$(docker_image_hash base)";
    - docker_build_image dependency $(docker_image_hash dependency)
    - export DEPENDENCY_IMAGE="${REGISTRY}/dependency:$(docker_image_hash dependency)";
    - docker_build_image jsdependency $(docker_image_hash jsdependency)
    - export JSDEPENDENCY_IMAGE="${REGISTRY}/jsdependency:$(docker_image_hash jsdependency)"
    - cp $DOCKER_GIT_CONFIG ./ci/dockerimage/.gitconfig
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/reuse_or_build_image.sh source false
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/build_image.sh jsbuild
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/build_image.sh build
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/build_image.sh built
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/build_image.sh test-built
  rules:
    - if: $PIPELINE_TYPE =~ /release-weekly/
      variables:
        RELEASE_TYPE: weekly
    - if: $PIPELINE_TYPE =~ /build-nightly/ # todo: to become release-nightly. Then remove this. release will be the cache all.
      variables:
        RELEASE_TYPE: be
    - if: $PIPELINE_TYPE =~ /release/
      variables:
        RELEASE_TYPE: be
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /docker-build-built/
    - !reference [.php-unit-all-tests-built, rules]
    - !reference [.php-unit-tinebase-tests-built, rules]
    - !reference [.php-unit-nogitlabci-tests-built, rules]
    - !reference [docker_build_packages, rules]
    - !reference [deploy-customer-image-to-registry, rules]
    - !reference [deploy-built-image-to-dockerhub, rules]
  timeout: 120m
  interruptible: true
# docker_build_built_arm64:
#   services:
#     - name: ${UTIL_REGISTRY}/docker:20.10.21-dind-r1
#       alias: docker
#   image: ${UTIL_REGISTRY}/docker:20.10.21-r1
#   extends: docker_build_built
#   variables:
#     IMAGE_TAG_PLATFORM_POSTFIX: -arm64
#     IMAGE_TAG: ${CI_PIPELINE_ID}-${PHP_VERSION}-arm64
#   tags:
#     - arm64
#   rules:
#     - if: $DOCKER_BUILD_BUILT_ARM64 == "false"
#       when: never
#     - if: $DOCKER_BUILD_BUILT_ARM64 == "true"
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /docker-build-built-arm64/

docker_build_dev:
  extends: .abstract_jobs.docker
  stage: build2
  script:
    - !reference [.lib, script]
    - docker_build_image base $(docker_image_hash base)
    - export BASE_IMAGE="${REGISTRY}/base:$(docker_image_hash base)";
    - ${CI_BUILDS_DIR}/${CI_PROJECT_NAMESPACE}/tine20/ci/scripts/build_image.sh dev
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /docker-build-dev/
    - !reference [deploy-dev-image-to-gitlab, rules]
    - !reference [deploy-dev-image-to-dockerhub, rules]
  timeout: 60m
  interruptible: true
docker_build_dev_arm64:
  services:
    - name: ${UTIL_REGISTRY}/docker:20.10.21-dind-r1
      alias: docker
  image: ${UTIL_REGISTRY}/docker:20.10.21-r1
  extends: docker_build_dev
  variables:
    IMAGE_TAG_PLATFORM_POSTFIX: -arm64
    IMAGE_TAG: ${CI_PIPELINE_ID}-${PHP_VERSION}-arm64
  tags:
    - arm64
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /docker-build-dev-arm64/
    - !reference [deploy-dev-image-to-gitlab-arm64, rules]
    - !reference [deploy-dev-image-to-dockerhub-arm64, rules]

docker_build_test:
  extends: .abstract_jobs.docker
  stage: build1
  parallel:
    matrix:
      - PHP_VERSION:
          - "8.0"
          - "8.1"
          - "8.2"
          - "8.3"
  before_script:
    - export DOCKER_BUILDKIT=0
    - export PROGRESS_NO_TRUNC=1 # stop docker from truncating aws image names
    - !reference [.lib, script]
    - docker_registry_login ${REGISTRY} ${REGISTRY_USER} ${REGISTRY_PASSWORD}
    - docker_registry_login ${CI_REGISTRY} ${CI_REGISTRY_USER} ${CI_REGISTRY_PASSWORD}
    - |
      WAIT_TIME=0
      until [ $WAIT_TIME -eq 60 ] || docker version > /dev/null 2>&1
      do
        echo "."
        sleep 1
        WAIT_TIME=$((WAIT_TIME+1))
      done
      [ $WAIT_TIME -lt 60 ]
  script:
    - !reference [.lib, script]
    - docker_build_image base $(docker_image_hash base)
    - export BASE_IMAGE="${REGISTRY}/base:$(docker_image_hash base)";
    - docker_build_image_test
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /docker-build-test/ 
    - if: $PIPELINE_TYPE =~ /build-test-images/
  timeout: 60m
  interruptible: false

docker_build_packages:
  extends: .abstract_jobs.docker
  stage: build3
  variables:
    GIT_DEPTH: 100
  script:
    - !reference [.lib, script]
    - packaging
  rules:
    # !references should come first, they may include variables to be set
    - !reference [release-packages-to-gitlab, rules]
    - !reference [release-packages-to-github, rules]
    - !reference [release-packages-to-vpackages, rules]
    - if: $PIPELINE_TYPE =~ /build-nightly/
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /docker-build-packages/
    - if: $CI_COMMIT_TAG
  timeout: 120m
  interruptible: true