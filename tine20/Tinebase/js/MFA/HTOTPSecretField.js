/*
 * Tine 2.0
 *
 * @license     http://www.gnu.org/licenses/agpl.html AGPL Version 3
 * @author      Cornelius Weiss <c.weiss@metaways.de>
 * @copyright   Copyright (c) 2021 Metaways Infosystems GmbH (http://www.metaways.de)
 */

Ext.ns('Tine.Tinebase');

const HTOTOPSecretField = Ext.extend(Ext.form.FieldSet, {
    /**
     * @cfg {String} type h|totp
     */
    type: 'totp',

    height: 300,
    
    initComponent: function() {
        this.title = i18n._('Secret Key');
        this.explainText = new Ext.form.Label({
            text: i18n._("Please note: After saving you can not view this autogenerated secret key again!")
        });
        this.secretField = new Ext.form.TextField({
            //@TODO clipboard plugin!
            name: 'secret',
            anchor: '100%',
            hideLabel: true,
            setValue: this.setValue.createDelegate(this)
        });
        this.qrField = new Ext.BoxComponent({
            width: 150,
            height: 150,
            html: '<canvas style="width: 100%; height: 100%"/><img src="favicon/180" style="display: none;">'
        });
        this.items = [
            this.explainText,
            this.secretField,
            this.qrField
        ];

        this.supr().initComponent.call(this);
    },
    
    onRender: function() {
        this.supr().onRender.apply(this, arguments);
        this.editDialog = this.findParentBy(function (c) {
            return c instanceof Tine.widgets.dialog.EditDialog
        });
    },
    
    setValue: function(value, record) {
        const supr = Ext.form.TextField.prototype.setValue.createDelegate(this.secretField);
        
        if (!value && [0, "0"].indexOf(record.id) >= 0) {
            supr(i18n._('Generating secret key ...'));
            this.secretField.setDisabled(true);
            import('rfc4648').then((module) => {
                const bytes = new Uint8Array(35);
                window.crypto.getRandomValues(bytes);
                supr(module.base32.stringify(bytes));
                this.secretField.setDisabled(false);
                this.onValueChange();
            });
        } else {
            this.explainText.setText(i18n._("Existing secret keys can't be viewed. You need to generate a new one if the old got lost."));
            this.secretField.hide();
            this.qrField.hide();
        }
    },

    onValueChange: async function() {
        const secret = this.secretField.getValue();
        const type = this.type.toLowerCase();
        const account = encodeURIComponent(this.editDialog.blConfigPanel.account.get('accountLoginName'));
        const issuer = encodeURIComponent(window.location.hostname);
        const canvas = this.qrField.el.child('canvas').dom;
        const favicon = this.qrField.el.child('img').dom;
        const context = canvas.getContext("2d");
        

        let uri = `otpauth://${type}/${issuer}:${account}?secret=${secret}&issuer=${issuer}`;
        // uri += "&algorithm=" + this.editDialog.record.get('algorithm');
        // uri += "&digits=" + this.editDialog.record.get('digits');
        // uri += "&period=" + this.editDialog.record.get('period');
        if (type == "hotp")
            uri += "&counter=" + (this.editDialog.record.get('counter') || 0);
        // uri += "&lock=" + ???; // freeOTP only?
        uri += "&image=" + encodeURIComponent(Tine.Tinebase.common.getUrl() + Tine.Tinebase.registry.get('favicon/180')); // freeOTP only?;
        
        const QRCode = await import(/* webpackChunkName: "Tinebase/js/qrcode" */ 'qrcode');
        await QRCode.toCanvas(canvas, uri, {width: 200, errorCorrectionLevel: 'H'});
        
        context.beginPath();
        context.arc(100, 100, 25, 0, 2 * Math.PI, false);
        context.fillStyle = 'white';
        context.fill();
        context.drawImage(favicon, 80, 80, 40, 40);
        favicon.addEventListener('load', e => {
            context.drawImage(favicon, 80, 80, 40, 40);
        });
        
        // this.qrField.el.child('img').dom.src = imgURL;

        const typeString = this.editDialog.record.constructor.getRecordName();
        this.editDialog.window.setTitle(`${typeString} ${i18n._('for')} ${account} : ${issuer}`);
    }
});

Ext.reg('mfa-htotp-secretfield', HTOTOPSecretField)

Tine.widgets.form.FieldManager.register('Tinebase', 'MFA_TOTPUserConfig', 'secret', {
    type: 'totp',
    xtype: 'mfa-htotp-secretfield',
    height: 300,
}, Tine.widgets.form.FieldManager.CATEGORY_EDITDIALOG);

Tine.widgets.form.FieldManager.register('Tinebase', 'MFA_HOTPUserConfig', 'secret', {
    type: 'hotp',
    xtype: 'mfa-htotp-secretfield',
    height: 300,
}, Tine.widgets.form.FieldManager.CATEGORY_EDITDIALOG);
