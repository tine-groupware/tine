version: '2'
services:
  db:
    image: mariadb:10.6
    command: --max-allowed-packet=209715210
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: &MYSQL_DATABASE tine
      MYSQL_USER: &MYSQL_USER tine
      MYSQL_PASSWORD: &MYSQL_PASSWORD tine
    ### use volume for persistent DB
    volumes:
      - "{{ tinedockercompose_db_path }}:/var/lib/mysql"
    networks:
      - internal_network

  web:
    image: {{ tinedockercompose_tine_image }}
    restart: always
    depends_on:
      - db
      - cache
    environment:
      TINE20_DATABASE_HOST: db
      TINE20_DATABASE_DBNAME: *MYSQL_DATABASE
      TINE20_DATABASE_USERNAME: *MYSQL_USER
      TINE20_DATABASE_PASSWORD: *MYSQL_PASSWORD
      TINE20_DATABASE_TABLEPREFIX: tine20_
      TINE20_CACHING_BACKEND: Redis
      TINE20_CACHING_REDIS_HOST: cache
      TINE20_ACTIONQUEUE_HOST: cache
      TINE20_SESSION_BACKEND: Redis
      TINE20_SESSION_HOST: cache
      TINE20_CREDENTIALCACHESHAREDKEY: change_me
      TINE20_SETUPUSER_USERNAME: tinesetup
      TINE20_SETUPUSER_PASSWORD: {{ tinedockercompose_tinesetuppw }}
      TINE20_LOGGER_PRIORITY: "5"
      ### install+update tine automatically
      # TINE_INSTALL: "true"
    volumes:
      - "{{ tinedockercompose_confd_path }}:/etc/tine20/conf.d"
      - "{{ tinedockercompose_files_path }}:/var/lib/tine20/files"
      - "{{ tinedockercompose_backup_path }}:/var/lib/tine20/backup"
    networks:
      - external_network
      - internal_network
    ports:
      - "{{ tinedockercompose_ports }}"
{% if tinedockercompose_extra_hosts is defined %}
    extra_hosts:
      - "{{ tinedockercompose_extra_hosts }}"
{% endif %}
    ### for traefik support (see https://doc.traefik.io/traefik/providers/docker/)
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.web.rule=Host(`MYDOMAIN.de`)"
#      - "traefik.http.routers.web.entrypoints=websecure"
#      - "traefik.http.routers.web.tls.certresolver=http01"
#      - "traefik.http.services.web.loadbalancer.server.port=80"

  cache:
    image: redis:5.0.5
    restart: always
    networks:
      - internal_network

  docservice:
    image: tinegroupware/document-preview-service:2.1
    networks:
      - internal_network

#  broadcasthub:
#    image: tinegroupware/broadcasthub:0.6
#    networks:
#      - external_network
#      - internal_network
#    ports:
#      - "5001:80"
#    environment:
#      REDIS_URL: redis://cache:6379
#      REDIS_CHANNEL: broadcasthub
#      TINE20_JSON_API_URL: http://localhost
#      AUTH_TIMEOUT: 5000
#      WS_PORT: 80
#      DEBUG: '*'
#      DEBUG_DEFAULT_LOGGING: "on"
#      DEBUG_LOG_TO_FILE: "off"
#      DEBUG_LOG_FILE: ../../stdout.log

#  documentserver:
#    image: onlyoffice/documentserver:latest
#    ports:
#      - "4020:80"
#    environment:
#      JWT_ENABLED: "true"
#      JWT_SECRET: "change_me_also_define_in_tine_cfg"
#    networks:
#      - external_network
#      - internal_network

#  clamav:
#    image: tiredofit/clamav
#    container_name: clamav
#    environment:
#      - ZABBIX_HOSTNAME=clamav
#    # need to be created on the host
#    volumes:
#      - "clamav_files:/data"
#    networks:
#      - internal_network

#  traefik:
#    image: "traefik:v2.6"
#    restart: always
#    container_name: "traefik"
#    command:
#      - "--providers.docker=true"
#      - "--providers.docker.exposedbydefault=false"
#      - "--entrypoints.web.address=:80"
#      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
#      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
#      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
#      - "--entrypoints.websecure.address=:443"
#      - "--certificatesresolvers.http01.acme.httpchallenge=true"
#      - "--certificatesresolvers.http01.acme.httpchallenge.entrypoint=web"
#      - "--certificatesresolvers.http01.acme.storage=/letsencrypt/acme.json"
#    ports:
#      - "80:80"
#      - "443:443"
#      - "8080:8080"
#    volumes:
#      - "./letsencrypt:/letsencrypt"
#      - "/var/run/docker.sock:/var/run/docker.sock:ro"

### optional: use docker volumes instead of directory mounts
# volumes:
#  clamav_files:

networks:
  external_network:
  internal_network:
    internal: true
